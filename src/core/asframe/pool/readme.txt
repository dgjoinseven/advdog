使用池对象技术之前，一定要先阅读这里的内容。不然很容易被多种实现的池对象技术搞晕
这里的池主要是有3套对象池技术
1.最简单的池技术，这里是没实现任何接口，纯粹最简单的，只有取得，返回和销毁对象的功能(实现了销毁接口的对象)
这种池技术主要是用于获取和返回的时候不需要做特别的事情。例如纯粹的Sprite对象的缓存
使用的类：SimplePool

2.需要使用到池技术的对象都实现特定的池接口对象IPoolObject
通过实现了IPool接口的对象来管理这些池对象。（默认实现了ObjectPool）
这种池技术主要是适用于自己新写的，同时又需要在对象借出和返回时做一些自定义的事情。
例如取出之前做一些数值的初始化，还回去的时候做一些数据的销毁等等
通过实现指定的接口，可以很方便地放到IPool中管理

注意，该套接口还有另外一个支持键值的池。IKeyedPool和实现
相关类库:
IPoolObject 池对象，所以需要放到缓存池的，都要实现该接口
IPool 对象池，专门管理IPoolObject对象的
IKeyedPool 带有key的对象池，其实就是用map管理IPool

3.利用池接口，对象创建工厂等多种结合实现对复杂对象的池管理
该池技术主要是用于一些难以实现或者不想实现IPoolObject接口，本身又有复杂操作的对象。在取出和放进去之前都
有操作需要做。类似2的情况，但是实现IPoolObject又累赘，或者说还有更多的事情要做。等等
这个时候可以采用工厂生成对象的方式。
先介绍一种
IObjectPool 对象池接口，该接口可以用来存放任意对象的对象池接口
ObjectPool 实现了IObjectPool。这里构造有个重要的参数IPoolableObjectFactory
IPoolableObjectFactory 接口主要就是给实际用户拿来扩展的了，所以只有接口没有实现。
基本上，对对象的操作，都是IPoolableObjectFactory里面操作。所以比较灵活。
ObjectPool只是负责管理和操作IPoolableObjectFactory